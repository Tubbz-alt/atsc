#pragma once
#include <immintrin.h>
#include <cassert>
#include "atsc_parameters.h"


template<typename PARAMETERS>
struct atsc_rrc_filter {

    void process_field(std::complex<float>* out, std::complex<float>* in) {
        for (unsigned i = 0; i < PARAMETERS::ATSC_SYMBOLS_PER_FIELD; i++) {
            filter(&out[i], &in[i]);
        }

    }

    static void filter(std::complex<float>* out, std::complex<float>* in) {
        __m256 val0 = _mm256_setzero_ps();
        __m256 val1 = _mm256_setzero_ps();
        __m256 val2 = _mm256_setzero_ps();
        __m256 val3 = _mm256_setzero_ps();

        float* in_ptr = (float*)in;
        float* tap_ptr = (float*)coefficients;

        for (unsigned i = 0; i < (sizeof(coefficients)/sizeof(coefficients[0])) / 16; i++) {
            assert(in_ptr != NULL);
            __m256 in0 = _mm256_loadu_ps(in_ptr);
            __m256 in1 = _mm256_loadu_ps(in_ptr + 8);
            __m256 in2 = _mm256_loadu_ps(in_ptr + 16);
            __m256 in3 = _mm256_loadu_ps(in_ptr + 24);

            __m256 tap0 = _mm256_load_ps(tap_ptr);
            __m256 tap1 = _mm256_load_ps(tap_ptr + 8);

            __m256 tap0lo = _mm256_unpacklo_ps(tap0, tap0);
            __m256 tap0hi = _mm256_unpackhi_ps(tap0, tap0);            
            __m256 tap1lo = _mm256_unpacklo_ps(tap1, tap1);
            __m256 tap1hi = _mm256_unpackhi_ps(tap1, tap1);            

                   tap0 = _mm256_permute2f128_ps(tap0lo, tap0hi, 0x20);
                   tap1 = _mm256_permute2f128_ps(tap0lo, tap0hi, 0x31);
            __m256 tap2 = _mm256_permute2f128_ps(tap1lo, tap1hi, 0x20);
            __m256 tap3 = _mm256_permute2f128_ps(tap1lo, tap1hi, 0x31);

            val0 = _mm256_fmadd_ps(in0, tap0, val0);
            val1 = _mm256_fmadd_ps(in1, tap1, val1);
            val2 = _mm256_fmadd_ps(in2, tap2, val2);
            val3 = _mm256_fmadd_ps(in3, tap3, val3);

            in_ptr += 32;
            tap_ptr += 16;
        }

        val0 = _mm256_add_ps(val0, val1);
        val0 = _mm256_add_ps(val0, val2);
        val0 = _mm256_add_ps(val0, val3);

        __attribute__((aligned(32))) std::complex<float> result[4];
        _mm256_store_ps((float*)result, val0);
        result[0] += result[1] + result[2] + result[3];
        *out = result[0];
    }

    static inline float __attribute__((aligned(32))) coefficients[] = { 2.0014302208437584e-05, -4.354902193881571e-05, -4.177004029770615e-06, 5.1516170060494915e-05, -1.4889413250784855e-05, -5.355695975595154e-05, 3.5067623684881255e-05, 4.837794040213339e-05, -5.3716903494205326e-05, -3.537974043865688e-05, 6.790993211325258e-05, 1.4841340998827945e-05, -7.474127050954849e-05, 1.1962760254391469e-05, 7.16860595275648e-05, -4.273113881936297e-05, -5.6981254601851106e-05, 7.420157635351643e-05, 2.999735988851171e-05, -0.00010231780470348895, 8.43199813971296e-06, 0.00012249033898115158, -5.575247632805258e-05, -0.0001299353752983734, 0.00010752649541245773, 0.00012006719771306962, -0.0001573779300088063, -8.891266770660877e-05, 0.0001970411540241912, 3.35122604155913e-05, -0.00021649124391842633, 4.772863394464366e-05, 0.00020410622528288513, -0.00015477252600248903, -0.00014677346916869283, 0.00028579513309523463, 2.97915430564899e-05, -0.00043716293293982744, 0.00016369293734896928, 0.000603552907705307, -0.00045420980313792825, -0.0007782107568345964, 0.0008694980060681701, 0.0009533336269669235, -0.0014525431906804442, -0.001120551023632288, 0.002280974294990301, 0.001271468005143106, -0.003520243801176548, -0.001398230786435306, 0.005604704841971397, 0.001494067837484181, -0.010142557322978973, -0.001553765730932355, 0.03167630732059479, 0.051579732447862625, 0.03167630732059479, -0.001553765730932355, -0.010142557322978973, 0.001494067837484181, 0.005604704841971397, -0.001398230786435306, -0.003520243801176548, 0.001271468005143106, 0.002280974294990301, -0.001120551023632288, -0.0014525431906804442, 0.0009533336269669235, 0.0008694980060681701, -0.0007782107568345964, -0.00045420980313792825, 0.000603552907705307, 0.00016369293734896928, -0.00043716293293982744, 2.97915430564899e-05, 0.00028579513309523463, -0.00014677346916869283, -0.00015477252600248903, 0.00020410622528288513, 4.772863394464366e-05, -0.00021649124391842633, 3.35122604155913e-05, 0.0001970411540241912, -8.891266770660877e-05, -0.0001573779300088063, 0.00012006719771306962, 0.00010752649541245773, -0.0001299353752983734, -5.575247632805258e-05, 0.00012249033898115158, 8.43199813971296e-06, -0.00010231780470348895, 2.999735988851171e-05, 7.420157635351643e-05, -5.6981254601851106e-05, -4.273113881936297e-05, 7.16860595275648e-05, 1.1962760254391469e-05, -7.474127050954849e-05, 1.4841340998827945e-05, 6.790993211325258e-05, -3.537974043865688e-05, -5.3716903494205326e-05, 4.837794040213339e-05, 3.5067623684881255e-05, -5.355695975595154e-05, -1.4889413250784855e-05, 5.1516170060494915e-05, -4.177004029770615e-06, -4.354902193881571e-05, 2.0014302208437584e-05, 0. };
    static_assert((sizeof(coefficients)/sizeof(coefficients[0])) % 16 == 0);
};